/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package bd.shakik.avro.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BusPosition extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7806929310328913833L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BusPosition\",\"namespace\":\"bd.shakik.avro.schemas\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"lon\",\"type\":\"double\"},{\"name\":\"lat\",\"type\":\"double\"}]}},{\"name\":\"bearing\",\"type\":\"double\"},{\"name\":\"kmPerHour\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<BusPosition> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BusPosition> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BusPosition> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BusPosition> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BusPosition> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BusPosition to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BusPosition from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BusPosition instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BusPosition fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.time.Instant timestamp;
  private bd.shakik.avro.schemas.Location location;
  private double bearing;
  private double kmPerHour;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BusPosition() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param timestamp The new value for timestamp
   * @param location The new value for location
   * @param bearing The new value for bearing
   * @param kmPerHour The new value for kmPerHour
   */
  public BusPosition(java.lang.CharSequence id, java.time.Instant timestamp, bd.shakik.avro.schemas.Location location, java.lang.Double bearing, java.lang.Double kmPerHour) {
    this.id = id;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.location = location;
    this.bearing = bearing;
    this.kmPerHour = kmPerHour;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return timestamp;
    case 2: return location;
    case 3: return bearing;
    case 4: return kmPerHour;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.time.Instant)value$; break;
    case 2: location = (bd.shakik.avro.schemas.Location)value$; break;
    case 3: bearing = (java.lang.Double)value$; break;
    case 4: kmPerHour = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public bd.shakik.avro.schemas.Location getLocation() {
    return location;
  }


  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(bd.shakik.avro.schemas.Location value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'bearing' field.
   * @return The value of the 'bearing' field.
   */
  public double getBearing() {
    return bearing;
  }


  /**
   * Sets the value of the 'bearing' field.
   * @param value the value to set.
   */
  public void setBearing(double value) {
    this.bearing = value;
  }

  /**
   * Gets the value of the 'kmPerHour' field.
   * @return The value of the 'kmPerHour' field.
   */
  public double getKmPerHour() {
    return kmPerHour;
  }


  /**
   * Sets the value of the 'kmPerHour' field.
   * @param value the value to set.
   */
  public void setKmPerHour(double value) {
    this.kmPerHour = value;
  }

  /**
   * Creates a new BusPosition RecordBuilder.
   * @return A new BusPosition RecordBuilder
   */
  public static bd.shakik.avro.schemas.BusPosition.Builder newBuilder() {
    return new bd.shakik.avro.schemas.BusPosition.Builder();
  }

  /**
   * Creates a new BusPosition RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BusPosition RecordBuilder
   */
  public static bd.shakik.avro.schemas.BusPosition.Builder newBuilder(bd.shakik.avro.schemas.BusPosition.Builder other) {
    if (other == null) {
      return new bd.shakik.avro.schemas.BusPosition.Builder();
    } else {
      return new bd.shakik.avro.schemas.BusPosition.Builder(other);
    }
  }

  /**
   * Creates a new BusPosition RecordBuilder by copying an existing BusPosition instance.
   * @param other The existing instance to copy.
   * @return A new BusPosition RecordBuilder
   */
  public static bd.shakik.avro.schemas.BusPosition.Builder newBuilder(bd.shakik.avro.schemas.BusPosition other) {
    if (other == null) {
      return new bd.shakik.avro.schemas.BusPosition.Builder();
    } else {
      return new bd.shakik.avro.schemas.BusPosition.Builder(other);
    }
  }

  /**
   * RecordBuilder for BusPosition instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BusPosition>
    implements org.apache.avro.data.RecordBuilder<BusPosition> {

    private java.lang.CharSequence id;
    private java.time.Instant timestamp;
    private bd.shakik.avro.schemas.Location location;
    private bd.shakik.avro.schemas.Location.Builder locationBuilder;
    private double bearing;
    private double kmPerHour;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(bd.shakik.avro.schemas.BusPosition.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasLocationBuilder()) {
        this.locationBuilder = bd.shakik.avro.schemas.Location.newBuilder(other.getLocationBuilder());
      }
      if (isValidValue(fields()[3], other.bearing)) {
        this.bearing = data().deepCopy(fields()[3].schema(), other.bearing);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.kmPerHour)) {
        this.kmPerHour = data().deepCopy(fields()[4].schema(), other.kmPerHour);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing BusPosition instance
     * @param other The existing instance to copy.
     */
    private Builder(bd.shakik.avro.schemas.BusPosition other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      this.locationBuilder = null;
      if (isValidValue(fields()[3], other.bearing)) {
        this.bearing = data().deepCopy(fields()[3].schema(), other.bearing);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.kmPerHour)) {
        this.kmPerHour = data().deepCopy(fields()[4].schema(), other.kmPerHour);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public bd.shakik.avro.schemas.BusPosition.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public bd.shakik.avro.schemas.BusPosition.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public bd.shakik.avro.schemas.BusPosition.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[1], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public bd.shakik.avro.schemas.BusPosition.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public bd.shakik.avro.schemas.Location getLocation() {
      return location;
    }


    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public bd.shakik.avro.schemas.BusPosition.Builder setLocation(bd.shakik.avro.schemas.Location value) {
      validate(fields()[2], value);
      this.locationBuilder = null;
      this.location = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public bd.shakik.avro.schemas.Location.Builder getLocationBuilder() {
      if (locationBuilder == null) {
        if (hasLocation()) {
          setLocationBuilder(bd.shakik.avro.schemas.Location.newBuilder(location));
        } else {
          setLocationBuilder(bd.shakik.avro.schemas.Location.newBuilder());
        }
      }
      return locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'location' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public bd.shakik.avro.schemas.BusPosition.Builder setLocationBuilder(bd.shakik.avro.schemas.Location.Builder value) {
      clearLocation();
      locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'location' field has an active Builder instance
     * @return True if the 'location' field has an active Builder instance
     */
    public boolean hasLocationBuilder() {
      return locationBuilder != null;
    }

    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public bd.shakik.avro.schemas.BusPosition.Builder clearLocation() {
      location = null;
      locationBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'bearing' field.
      * @return The value.
      */
    public double getBearing() {
      return bearing;
    }


    /**
      * Sets the value of the 'bearing' field.
      * @param value The value of 'bearing'.
      * @return This builder.
      */
    public bd.shakik.avro.schemas.BusPosition.Builder setBearing(double value) {
      validate(fields()[3], value);
      this.bearing = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'bearing' field has been set.
      * @return True if the 'bearing' field has been set, false otherwise.
      */
    public boolean hasBearing() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'bearing' field.
      * @return This builder.
      */
    public bd.shakik.avro.schemas.BusPosition.Builder clearBearing() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'kmPerHour' field.
      * @return The value.
      */
    public double getKmPerHour() {
      return kmPerHour;
    }


    /**
      * Sets the value of the 'kmPerHour' field.
      * @param value The value of 'kmPerHour'.
      * @return This builder.
      */
    public bd.shakik.avro.schemas.BusPosition.Builder setKmPerHour(double value) {
      validate(fields()[4], value);
      this.kmPerHour = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'kmPerHour' field has been set.
      * @return True if the 'kmPerHour' field has been set, false otherwise.
      */
    public boolean hasKmPerHour() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'kmPerHour' field.
      * @return This builder.
      */
    public bd.shakik.avro.schemas.BusPosition.Builder clearKmPerHour() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BusPosition build() {
      try {
        BusPosition record = new BusPosition();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.time.Instant) defaultValue(fields()[1]);
        if (locationBuilder != null) {
          try {
            record.location = this.locationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("location"));
            throw e;
          }
        } else {
          record.location = fieldSetFlags()[2] ? this.location : (bd.shakik.avro.schemas.Location) defaultValue(fields()[2]);
        }
        record.bearing = fieldSetFlags()[3] ? this.bearing : (java.lang.Double) defaultValue(fields()[3]);
        record.kmPerHour = fieldSetFlags()[4] ? this.kmPerHour : (java.lang.Double) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BusPosition>
    WRITER$ = (org.apache.avro.io.DatumWriter<BusPosition>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BusPosition>
    READER$ = (org.apache.avro.io.DatumReader<BusPosition>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










